{"ast":null,"code":"'use strict';\n\nvar Matrix = require('./matrix');\n\nvar operations = {\n  matrix: true,\n  scale: true,\n  rotate: true,\n  translate: true,\n  skewX: true,\n  skewY: true\n};\nvar CMD_SPLIT_RE = /\\s*(matrix|translate|scale|rotate|skewX|skewY)\\s*\\(\\s*(.+?)\\s*\\)[\\s,]*/;\nvar PARAMS_SPLIT_RE = /[\\s,]+/;\n\nmodule.exports = function transformParse(transformString) {\n  var matrix = new Matrix();\n  var cmd, params; // Split value into ['', 'translate', '10 50', '', 'scale', '2', '', 'rotate',  '-45', '']\n\n  transformString.split(CMD_SPLIT_RE).forEach(function (item) {\n    // Skip empty elements\n    if (!item.length) {\n      return;\n    } // remember operation\n\n\n    if (typeof operations[item] !== 'undefined') {\n      cmd = item;\n      return;\n    } // extract params & att operation to matrix\n\n\n    params = item.split(PARAMS_SPLIT_RE).map(function (i) {\n      return +i || 0;\n    }); // If params count is not correct - ignore command\n\n    switch (cmd) {\n      case 'matrix':\n        if (params.length === 6) {\n          matrix.matrix(params);\n        }\n\n        return;\n\n      case 'scale':\n        if (params.length === 1) {\n          matrix.scale(params[0], params[0]);\n        } else if (params.length === 2) {\n          matrix.scale(params[0], params[1]);\n        }\n\n        return;\n\n      case 'rotate':\n        if (params.length === 1) {\n          matrix.rotate(params[0], 0, 0);\n        } else if (params.length === 3) {\n          matrix.rotate(params[0], params[1], params[2]);\n        }\n\n        return;\n\n      case 'translate':\n        if (params.length === 1) {\n          matrix.translate(params[0], 0);\n        } else if (params.length === 2) {\n          matrix.translate(params[0], params[1]);\n        }\n\n        return;\n\n      case 'skewX':\n        if (params.length === 1) {\n          matrix.skewX(params[0]);\n        }\n\n        return;\n\n      case 'skewY':\n        if (params.length === 1) {\n          matrix.skewY(params[0]);\n        }\n\n        return;\n    }\n  });\n  return matrix;\n};","map":{"version":3,"sources":["/Users/noah.menikefs/Desktop/menisked/MeniSked/node_modules/svgpath/lib/transform_parse.js"],"names":["Matrix","require","operations","matrix","scale","rotate","translate","skewX","skewY","CMD_SPLIT_RE","PARAMS_SPLIT_RE","module","exports","transformParse","transformString","cmd","params","split","forEach","item","length","map","i"],"mappings":"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","sourcesContent":["'use strict';\n\n\nvar Matrix = require('./matrix');\n\nvar operations = {\n  matrix: true,\n  scale: true,\n  rotate: true,\n  translate: true,\n  skewX: true,\n  skewY: true\n};\n\nvar CMD_SPLIT_RE    = /\\s*(matrix|translate|scale|rotate|skewX|skewY)\\s*\\(\\s*(.+?)\\s*\\)[\\s,]*/;\nvar PARAMS_SPLIT_RE = /[\\s,]+/;\n\n\nmodule.exports = function transformParse(transformString) {\n  var matrix = new Matrix();\n  var cmd, params;\n\n  // Split value into ['', 'translate', '10 50', '', 'scale', '2', '', 'rotate',  '-45', '']\n  transformString.split(CMD_SPLIT_RE).forEach(function (item) {\n\n    // Skip empty elements\n    if (!item.length) { return; }\n\n    // remember operation\n    if (typeof operations[item] !== 'undefined') {\n      cmd = item;\n      return;\n    }\n\n    // extract params & att operation to matrix\n    params = item.split(PARAMS_SPLIT_RE).map(function (i) {\n      return +i || 0;\n    });\n\n    // If params count is not correct - ignore command\n    switch (cmd) {\n      case 'matrix':\n        if (params.length === 6) {\n          matrix.matrix(params);\n        }\n        return;\n\n      case 'scale':\n        if (params.length === 1) {\n          matrix.scale(params[0], params[0]);\n        } else if (params.length === 2) {\n          matrix.scale(params[0], params[1]);\n        }\n        return;\n\n      case 'rotate':\n        if (params.length === 1) {\n          matrix.rotate(params[0], 0, 0);\n        } else if (params.length === 3) {\n          matrix.rotate(params[0], params[1], params[2]);\n        }\n        return;\n\n      case 'translate':\n        if (params.length === 1) {\n          matrix.translate(params[0], 0);\n        } else if (params.length === 2) {\n          matrix.translate(params[0], params[1]);\n        }\n        return;\n\n      case 'skewX':\n        if (params.length === 1) {\n          matrix.skewX(params[0]);\n        }\n        return;\n\n      case 'skewY':\n        if (params.length === 1) {\n          matrix.skewY(params[0]);\n        }\n        return;\n    }\n  });\n\n  return matrix;\n};\n"]},"metadata":{},"sourceType":"script"}